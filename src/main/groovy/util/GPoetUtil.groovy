package util

import bean.ApiExample
import bean.FieldParam
import com.squareup.javapoet.AnnotationSpec
import com.squareup.javapoet.ClassName
import com.squareup.javapoet.FieldSpec
import com.squareup.javapoet.JavaFile
import com.squareup.javapoet.MethodSpec
import com.squareup.javapoet.ParameterSpec
import com.squareup.javapoet.TypeName
import com.squareup.javapoet.TypeSpec
import global.Config
import groovy.json.JsonSlurper
import retrofit2.http.Body
import retrofit2.http.Path
import retrofit2.http.Query

import javax.lang.model.element.Modifier
import java.lang.reflect.Type

/**
 * JavaPoet生成代码的场所
 * Created by Administrator on 2017/2/14 0014.
 */
static generateRequestParam(String paramName, List<FieldParam> params) {

    //创建类
    TypeSpec.Builder paramType = TypeSpec.classBuilder(paramName)
            .addModifiers(Modifier.PUBLIC, Modifier.FINAL);
    //添加基本的属性
    params.forEach {
        p ->
            String doc = "type= $p.type  \n" +
                    "description=$p.description  \n" +
                    "optional=$p.optional \n"

//            println "p.type====$p.type"

            Class aClass = getPClass(p)

            FieldSpec fieldSpec = FieldSpec.builder(aClass, p.field)
                    .addModifiers(Modifier.PUBLIC)
                    .addJavadoc(doc)
                    .build();
            paramType.addField(fieldSpec)
    }
    //添加对应的注解
    paramType.addJavadoc('AutoGenerated RequestParam ')
    //创建
    print2File(Config.FILE_PATH.REQUEST, Config.PACKAGE_NAME.REQUEST, paramType.build())
    //包名+文件名就是它的TypeName
    return ClassName.get(Config.PACKAGE_NAME.REQUEST, paramName)
}


static void addPathAnnotation(String p, MethodSpec.Builder method) {
    ParameterSpec parameterSpec = ParameterSpec.builder(String.class, p)
            .addModifiers(Modifier.FINAL)
            .addAnnotation(AnnotationSpec.builder(Path.class).addMember('value', '$S', p).build())
            .build();
    method.addParameter(parameterSpec)
}


static print2File(String filePath, String packageName, TypeSpec typeSpec) {
    JavaFile javaFile = JavaFile.builder(packageName, typeSpec).build();
    File file = new File(filePath)
    if (!file.exists()) file.mkdirs()

//    javaFile.writeTo(System.out);
    javaFile.writeTo(file);
}

static print2Out(String packageName, TypeSpec typeSpec) {
    JavaFile javaFile = JavaFile.builder(packageName, typeSpec).build();
//    File file = new File(filePath)
//    if (!file.exists()) file.mkdirs()
    javaFile.writeTo(System.out);
//    javaFile.writeTo(file);
}


static List<ClassName> generateResponseClass(ApiExample ep, String responseName) {
    def classList = []
    def content = ep.content
//    if (!content) return ClassName.get(Config.PACKAGE_NAME.RESPONSE, responseName)
    def startIndex = content.indexOf("{")
    if (startIndex == -1) {
        classList.add(ClassName.get(Void.class))
        return classList
    }

    String realJson = content.substring(startIndex)

//    println realJson

    def json = new JsonSlurper().parseText(realJson)

    def me = new circleParse()

//生成className的方法
    ClassName out = ClassName.get(Config.PACKAGE_NAME.RESPONSE, responseName)

    TypeSpec.Builder outTb = TypeSpec.classBuilder(out).addModifiers(Modifier.PUBLIC)

    me.startParse(out, outTb, responseName, json, true)
    //输出
    print2File(Config.FILE_PATH.RESPONSE, Config.PACKAGE_NAME.RESPONSE, outTb.build())

//    if (json instanceof Map) {
//        generateResponse(json)
////        generateFromMap(responseName, json,classList)
//    } else if (json instanceof Object) {
//        println "jso=====$json.properties"
//    }

    classList.add(out)

    return classList
}

//使用递归的方式来生成。如果存在map.就需要创建新的文件
private static TypeSpec.Builder generateFromMap(String responseName, Map json, classList) {
    //如果存在map.就需要创建新的文件
    TypeSpec.Builder javaBeanClass = TypeSpec.classBuilder(responseName)
            .addModifiers(Modifier.PUBLIC)
    //遍历。如果子节点出现Map?
//    json.any {
//        element->
//            if (element.value instanceof Map)
//
//    }
    json.forEach {
        k, v ->
//            println k
//            println v.getClass()
            if (v instanceof Object) {
                FieldSpec filed = FieldSpec.builder(v.getClass(), k.toString())
                        .addModifiers(Modifier.PUBLIC, Modifier.FINAL)
                        .build();
                javaBeanClass.addField(filed)
                //根据这个json来生成java对象的ben
                print2File(Config.FILE_PATH.RESPONSE, Config.PACKAGE_NAME.RESPONSE, javaBeanClass.build())

                classList.add(ClassName.get(Config.PACKAGE_NAME.RESPONSE, responseName))

            } else if (v instanceof Map) {
                generateFromMap(responseName, v, classList)
            }
    }
}

static void addBodyParamToMethod(TypeName className, String methodNameParamName, MethodSpec.Builder mb) {
//将类用于生成参数
    ParameterSpec parameterSpec = ParameterSpec.builder(className, methodNameParamName)
//            .addModifiers(Modifier.FINAL)
            .addAnnotation(AnnotationSpec.builder(Body.class).build())
            .build()
    mb.addParameter(parameterSpec)
}

static addBodyParamToMethod(Type className, String methodNameParamName, MethodSpec.Builder mb) {
//将类用于生成参数
    ParameterSpec parameterSpec = ParameterSpec.builder(className, methodNameParamName)
            .addModifiers(Modifier.FINAL)
            .addAnnotation(AnnotationSpec.builder(Body.class).build())
            .build();

    mb.addParameter(parameterSpec)
}

static addQueryParam(FieldParam p, MethodSpec.Builder mb) {
    ParameterSpec parameterSpec = ParameterSpec.builder(getPClass(p), p.field)
//            .addModifiers(Modifier.FINAL)
            .addAnnotation(AnnotationSpec.builder(Query.class).addMember('value', '$S', p.field).build())
            .build();
    mb.addParameter(parameterSpec)
}

static Class getPClass(FieldParam param) {
//    println param.type
    switch (param.type) {
        case 'Integer': return Integer.class
        case 'String': return String.class
        case 'Double': return Double.class
        case 'BigDecimal': return BigDecimal.class
        case 'BigInteger': return BigInteger.class
        case 'Array': return ArrayList.class
        case 'Object[]': return ArrayList.class
        case 'Map': return Map.class
        default: return java.lang.Object.class
    }
}
//遍历子节点，子节点不是map的可以。如果是Object对象，就添加的classList里面，供给后面添加。如果不是，则创建新的节点，进行循环
static def generateResponse(Map map) {
    def subMap = map.findResults { k, v -> v instanceof Map }
    //又是子节点。子节点中可能有map吗？
    subMap
}